;; Michael DeWitt
;; 25 April 2011
;; SICP Exercise 1.9:
;;	Each of the following two procedures defines a method for adding two positive
;;	integers in terms of the procedures inc and dec, which respectively increment
;;	and decrement their argument by one.

(define (sum1 a b)
  (if (= a 0)
    b
    (inc (sum1 (dec a) b))))

(define (sum2 a b)
  (if (= a 0)
    b
    (sum2 (dec a) (inc b))))

;;	Using the substitution model, illustrate the process generated by each
;;	procedure in evaluating (sum* 4 5).  Are these processes iterative or 
;;	recursive?

;;
;; Answer:
;;	(sum1 4 5)
;;	(inc (sum1 (dec 4) 5))
;;	(inc (sum1 3 5))
;;	(inc (inc (sum1 2 5)))
;;	(inc (inc (inc (sum1 1 5 ))))
;;	(inc (inc (inc (inc (sum1 0 5)))))
;;	(inc (inc (inc (inc 5))))
;;	(inc (inc (inc 6)))
;;	(inc (inc 7))
;;	(inc 8)
;;	9
;;
;;	(sum2 4 5)
;;	(sum2 (dec 4) (inc 5))
;;	(sum2 3 6)
;;	(sum2 2 7)
;;	(sum2 1 8)
;;	(sum2 0 9)
;;	9
;;
;;	From the shapes of the above illustrations, it becomes evident that sum1
;;	describes a recursive process while sum2 is iterative.  The difference
;;	in their definitions that determines this nature is the placement of the
;;	modifications relative to the recursive procedure call.  In sum1, inc
;;	is used to modify the value returned by the recursive call, while sum2
;;	performs all of its modifications to the arguments inside of the 
;;	recursive step.  The outstanding modifications after the recursive call
;;	are what prevent sum1 from using tail recursion and acting iteratively.

;; 
;; Supporting Definitions:
;; 

(define (inc a)
  (+ a 1))

(define (dec a)
  (- a 1))

(display (sum1 4 5)) (newline)
(display (sum2 4 5)) (newline)
